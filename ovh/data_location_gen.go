// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"

	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func LocationDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"availability_zones": schema.ListAttribute{
			CustomType:          ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
			Computed:            true,
			Description:         "List of availability zones for the region",
			MarkdownDescription: "List of availability zones for the region",
		},
		"cardinal_point": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Cardinal direction where the region is located",
			MarkdownDescription: "Cardinal direction where the region is located",
		},
		"city_code": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "ISO code of the city",
			MarkdownDescription: "ISO code of the city",
		},
		"city_latitude": schema.NumberAttribute{
			CustomType:          ovhtypes.TfNumberType{},
			Computed:            true,
			Description:         "Geographical latitude of the city",
			MarkdownDescription: "Geographical latitude of the city",
		},
		"city_longitude": schema.NumberAttribute{
			CustomType:          ovhtypes.TfNumberType{},
			Computed:            true,
			Description:         "Geographical longitude of the city",
			MarkdownDescription: "Geographical longitude of the city",
		},
		"city_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Full name of the city",
			MarkdownDescription: "Full name of the city",
		},
		"code": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Region's short code",
			MarkdownDescription: "Region's short code",
		},
		"country_code": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "ISO code of the country",
			MarkdownDescription: "ISO code of the country",
		},
		"country_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Full name of the country",
			MarkdownDescription: "Full name of the country",
		},
		"geography_code": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Short code representing the geographical area",
			MarkdownDescription: "Short code representing the geographical area",
		},
		"geography_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Name of the geographical area",
			MarkdownDescription: "Name of the geographical area",
		},
		"location": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Location of the region",
			MarkdownDescription: "Location of the region",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Name",
			MarkdownDescription: "Name",
		},
		"opening_year": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "Year the region was opened",
			MarkdownDescription: "Year the region was opened",
		},
		"specific_type": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Specific typology of the region",
			MarkdownDescription: "Specific typology of the region",
		},
		"type": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "General typology of the region",
			MarkdownDescription: "General typology of the region",
		},
	}

	return schema.Schema{
		Description: "Get available region and its availability zones",
		Attributes:  attrs,
	}
}

type LocationModel struct {
	AvailabilityZones ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"availability_zones" json:"availabilityZones"`
	CardinalPoint     ovhtypes.TfStringValue                             `tfsdk:"cardinal_point" json:"cardinalPoint"`
	CityCode          ovhtypes.TfStringValue                             `tfsdk:"city_code" json:"cityCode"`
	CityLatitude      ovhtypes.TfNumberValue                             `tfsdk:"city_latitude" json:"cityLatitude"`
	CityLongitude     ovhtypes.TfNumberValue                             `tfsdk:"city_longitude" json:"cityLongitude"`
	CityName          ovhtypes.TfStringValue                             `tfsdk:"city_name" json:"cityName"`
	Code              ovhtypes.TfStringValue                             `tfsdk:"code" json:"code"`
	CountryCode       ovhtypes.TfStringValue                             `tfsdk:"country_code" json:"countryCode"`
	CountryName       ovhtypes.TfStringValue                             `tfsdk:"country_name" json:"countryName"`
	GeographyCode     ovhtypes.TfStringValue                             `tfsdk:"geography_code" json:"geographyCode"`
	GeographyName     ovhtypes.TfStringValue                             `tfsdk:"geography_name" json:"geographyName"`
	Location          ovhtypes.TfStringValue                             `tfsdk:"location" json:"location"`
	Name              ovhtypes.TfStringValue                             `tfsdk:"name" json:"name"`
	OpeningYear       ovhtypes.TfInt64Value                              `tfsdk:"opening_year" json:"openingYear"`
	SpecificType      ovhtypes.TfStringValue                             `tfsdk:"specific_type" json:"specificType"`
	Type              ovhtypes.TfStringValue                             `tfsdk:"type" json:"type"`
}

func (v *LocationModel) MergeWith(other *LocationModel) {

	if (v.AvailabilityZones.IsUnknown() || v.AvailabilityZones.IsNull()) && !other.AvailabilityZones.IsUnknown() {
		v.AvailabilityZones = other.AvailabilityZones
	}

	if (v.CardinalPoint.IsUnknown() || v.CardinalPoint.IsNull()) && !other.CardinalPoint.IsUnknown() {
		v.CardinalPoint = other.CardinalPoint
	}

	if (v.CityCode.IsUnknown() || v.CityCode.IsNull()) && !other.CityCode.IsUnknown() {
		v.CityCode = other.CityCode
	}

	if (v.CityLatitude.IsUnknown() || v.CityLatitude.IsNull()) && !other.CityLatitude.IsUnknown() {
		v.CityLatitude = other.CityLatitude
	}

	if (v.CityLongitude.IsUnknown() || v.CityLongitude.IsNull()) && !other.CityLongitude.IsUnknown() {
		v.CityLongitude = other.CityLongitude
	}

	if (v.CityName.IsUnknown() || v.CityName.IsNull()) && !other.CityName.IsUnknown() {
		v.CityName = other.CityName
	}

	if (v.Code.IsUnknown() || v.Code.IsNull()) && !other.Code.IsUnknown() {
		v.Code = other.Code
	}

	if (v.CountryCode.IsUnknown() || v.CountryCode.IsNull()) && !other.CountryCode.IsUnknown() {
		v.CountryCode = other.CountryCode
	}

	if (v.CountryName.IsUnknown() || v.CountryName.IsNull()) && !other.CountryName.IsUnknown() {
		v.CountryName = other.CountryName
	}

	if (v.GeographyCode.IsUnknown() || v.GeographyCode.IsNull()) && !other.GeographyCode.IsUnknown() {
		v.GeographyCode = other.GeographyCode
	}

	if (v.GeographyName.IsUnknown() || v.GeographyName.IsNull()) && !other.GeographyName.IsUnknown() {
		v.GeographyName = other.GeographyName
	}

	if (v.Location.IsUnknown() || v.Location.IsNull()) && !other.Location.IsUnknown() {
		v.Location = other.Location
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.OpeningYear.IsUnknown() || v.OpeningYear.IsNull()) && !other.OpeningYear.IsUnknown() {
		v.OpeningYear = other.OpeningYear
	}

	if (v.SpecificType.IsUnknown() || v.SpecificType.IsNull()) && !other.SpecificType.IsUnknown() {
		v.SpecificType = other.SpecificType
	}

	if (v.Type.IsUnknown() || v.Type.IsNull()) && !other.Type.IsUnknown() {
		v.Type = other.Type
	}

}
