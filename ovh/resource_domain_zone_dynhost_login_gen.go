// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"

	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DomainZoneDynhostLoginResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"id": schema.StringAttribute{
			CustomType:  ovhtypes.TfStringType{},
			Computed:    true,
			Description: "Unique identifier for the resource",
		},
		"login": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Login name",
			MarkdownDescription: "Login name",
		},
		"login_suffix": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Suffix that will be concatenated to the zoneName to create the login",
			MarkdownDescription: "Suffix that will be concatenated to the zoneName to create the login",
		},
		"password": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Sensitive:           true,
			Description:         "Password of the login",
			MarkdownDescription: "Password of the login",
		},
		"sub_domain": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Subdomain that the login will be allowed to update (use * to allow all)",
			MarkdownDescription: "Subdomain that the login will be allowed to update (use * to allow all)",
		},
		"zone": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Login zone",
			MarkdownDescription: "Login zone",
		},
		"zone_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Zone name",
			MarkdownDescription: "Zone name",
		},
	}

	return schema.Schema{
		Description: "",
		Attributes:  attrs,
	}
}

type DomainZoneDynhostLoginModel struct {
	ID          ovhtypes.TfStringValue `tfsdk:"id" json:"-"`
	Login       ovhtypes.TfStringValue `tfsdk:"login" json:"login"`
	LoginSuffix ovhtypes.TfStringValue `tfsdk:"login_suffix" json:"loginSuffix"`
	Password    ovhtypes.TfStringValue `tfsdk:"password" json:"password"`
	SubDomain   ovhtypes.TfStringValue `tfsdk:"sub_domain" json:"subDomain"`
	Zone        ovhtypes.TfStringValue `tfsdk:"zone" json:"zone"`
	ZoneName    ovhtypes.TfStringValue `tfsdk:"zone_name" json:"zoneName"`
}

func (v *DomainZoneDynhostLoginModel) MergeWith(other *DomainZoneDynhostLoginModel) {
	if (v.ID.IsUnknown() || v.ID.IsNull()) && !other.ID.IsUnknown() {
		v.ID = other.ID
	}

	if (v.Login.IsUnknown() || v.Login.IsNull()) && !other.Login.IsUnknown() {
		v.Login = other.Login
	}

	if (v.LoginSuffix.IsUnknown() || v.LoginSuffix.IsNull()) && !other.LoginSuffix.IsUnknown() {
		v.LoginSuffix = other.LoginSuffix
	}

	if (v.Password.IsUnknown() || v.Password.IsNull()) && !other.Password.IsUnknown() {
		v.Password = other.Password
	}

	if (v.SubDomain.IsUnknown() || v.SubDomain.IsNull()) && !other.SubDomain.IsUnknown() {
		v.SubDomain = other.SubDomain
	}

	if (v.Zone.IsUnknown() || v.Zone.IsNull()) && !other.Zone.IsUnknown() {
		v.Zone = other.Zone
	}

	if (v.ZoneName.IsUnknown() || v.ZoneName.IsNull()) && !other.ZoneName.IsUnknown() {
		v.ZoneName = other.ZoneName
	}
}

func (v DomainZoneDynhostLoginModel) ToCreate() *DomainZoneDynhostLoginModel {
	res := &DomainZoneDynhostLoginModel{}

	if !v.LoginSuffix.IsUnknown() {
		res.LoginSuffix = v.LoginSuffix
	}

	if !v.Password.IsUnknown() {
		res.Password = v.Password
	}

	if !v.SubDomain.IsUnknown() {
		res.SubDomain = v.SubDomain
	}

	return res
}

func (v DomainZoneDynhostLoginModel) ToUpdate() *DomainZoneDynhostLoginModel {
	res := &DomainZoneDynhostLoginModel{}

	if !v.SubDomain.IsUnknown() {
		res.SubDomain = v.SubDomain
	}

	return res
}

func (v *DomainZoneDynhostLoginModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.LoginSuffix.IsNull() && !v.LoginSuffix.IsUnknown() {
		toMarshal["loginSuffix"] = v.LoginSuffix
	}
	if !v.Password.IsNull() && !v.Password.IsUnknown() {
		toMarshal["password"] = v.Password
	}
	if !v.SubDomain.IsNull() && !v.SubDomain.IsUnknown() {
		toMarshal["subDomain"] = v.SubDomain
	}

	return json.Marshal(toMarshal)
}
