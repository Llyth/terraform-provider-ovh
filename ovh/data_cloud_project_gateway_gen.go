// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudProjectGatewayDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"external_information": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"ips": schema.ListNestedAttribute{
					NestedObject: schema.NestedAttributeObject{
						Attributes: map[string]schema.Attribute{
							"ip": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "External IP of the gateway",
								MarkdownDescription: "External IP of the gateway",
							},
							"subnet_id": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "Subnet ID of the ip",
								MarkdownDescription: "Subnet ID of the ip",
							},
						},
						CustomType: ExternalInformationIpsType{
							ObjectType: types.ObjectType{
								AttrTypes: ExternalInformationIpsValue{}.AttributeTypes(ctx),
							},
						},
					},
					CustomType:          ovhtypes.NewTfListNestedType[ExternalInformationIpsValue](ctx),
					Computed:            true,
					Description:         "External ips of the gateway",
					MarkdownDescription: "External ips of the gateway",
				},
				"network_id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "External network ID of the gateway",
					MarkdownDescription: "External network ID of the gateway",
				},
			},
			CustomType: ExternalInformationType{
				ObjectType: types.ObjectType{
					AttrTypes: ExternalInformationValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "External information",
			MarkdownDescription: "External information",
		},
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Id",
			MarkdownDescription: "Id",
		},
		"interfaces": schema.ListNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ID of the interface",
						MarkdownDescription: "ID of the interface",
					},
					"ip": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "IP of the interface",
						MarkdownDescription: "IP of the interface",
					},
					"network_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Network ID of the interface",
						MarkdownDescription: "Network ID of the interface",
					},
					"subnet_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Subnet ID of the interface",
						MarkdownDescription: "Subnet ID of the interface",
					},
				},
				CustomType: InterfacesType{
					ObjectType: types.ObjectType{
						AttrTypes: InterfacesValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType:          ovhtypes.NewTfListNestedType[InterfacesValue](ctx),
			Computed:            true,
			Description:         "Interfaces list of the gateway",
			MarkdownDescription: "Interfaces list of the gateway",
		},
		"model": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Model of the gateway",
			MarkdownDescription: "Model of the gateway",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Name of the gateway",
			MarkdownDescription: "Name of the gateway",
		},
		"region": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Gateway region",
			MarkdownDescription: "Gateway region",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Status of the gateway",
			MarkdownDescription: "Status of the gateway",
		},
	}

	return schema.Schema{
		Description: "Get gateway",
		Attributes:  attrs,
	}
}

type CloudProjectGatewayModel struct {
	ExternalInformation ExternalInformationValue                    `tfsdk:"external_information" json:"externalInformation"`
	Id                  ovhtypes.TfStringValue                      `tfsdk:"id" json:"id"`
	Interfaces          ovhtypes.TfListNestedValue[InterfacesValue] `tfsdk:"interfaces" json:"interfaces"`
	Model               ovhtypes.TfStringValue                      `tfsdk:"model" json:"model"`
	Name                ovhtypes.TfStringValue                      `tfsdk:"name" json:"name"`
	Region              ovhtypes.TfStringValue                      `tfsdk:"region" json:"region"`
	ServiceName         ovhtypes.TfStringValue                      `tfsdk:"service_name" json:"serviceName"`
	Status              ovhtypes.TfStringValue                      `tfsdk:"status" json:"status"`
}

func (v *CloudProjectGatewayModel) MergeWith(other *CloudProjectGatewayModel) {

	if (v.ExternalInformation.IsUnknown() || v.ExternalInformation.IsNull()) && !other.ExternalInformation.IsUnknown() {
		v.ExternalInformation = other.ExternalInformation
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Interfaces.IsUnknown() || v.Interfaces.IsNull()) && !other.Interfaces.IsUnknown() {
		v.Interfaces = other.Interfaces
	}

	if (v.Model.IsUnknown() || v.Model.IsNull()) && !other.Model.IsUnknown() {
		v.Model = other.Model
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

}

var _ basetypes.ObjectTypable = ExternalInformationType{}

type ExternalInformationType struct {
	basetypes.ObjectType
}

func (t ExternalInformationType) Equal(o attr.Type) bool {
	other, ok := o.(ExternalInformationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ExternalInformationType) String() string {
	return "ExternalInformationType"
}

func (t ExternalInformationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipsAttribute, ok := attributes["ips"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ips is missing from object`)

		return nil, diags
	}

	ipsVal, ok := ipsAttribute.(ovhtypes.TfListNestedValue[ExternalInformationIpsValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ips expected to be ovhtypes.TfListNestedValue[ExternalInformationIpsValue], was: %T`, ipsAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be ovhtypes.TfStringValue, was: %T`, networkIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ExternalInformationValue{
		Ips:       ipsVal,
		NetworkId: networkIdVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewExternalInformationValueNull() ExternalInformationValue {
	return ExternalInformationValue{
		state: attr.ValueStateNull,
	}
}

func NewExternalInformationValueUnknown() ExternalInformationValue {
	return ExternalInformationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewExternalInformationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ExternalInformationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ExternalInformationValue Attribute Value",
				"While creating a ExternalInformationValue value, a missing attribute value was detected. "+
					"A ExternalInformationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExternalInformationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ExternalInformationValue Attribute Type",
				"While creating a ExternalInformationValue value, an invalid attribute value was detected. "+
					"A ExternalInformationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExternalInformationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ExternalInformationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ExternalInformationValue Attribute Value",
				"While creating a ExternalInformationValue value, an extra attribute value was detected. "+
					"A ExternalInformationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ExternalInformationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewExternalInformationValueUnknown(), diags
	}

	ipsAttribute, ok := attributes["ips"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ips is missing from object`)

		return NewExternalInformationValueUnknown(), diags
	}

	ipsVal, ok := ipsAttribute.(ovhtypes.TfListNestedValue[ExternalInformationIpsValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ips expected to be ovhtypes.TfListNestedValue[ExternalInformationIpsValue], was: %T`, ipsAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewExternalInformationValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be ovhtypes.TfStringValue, was: %T`, networkIdAttribute))
	}

	if diags.HasError() {
		return NewExternalInformationValueUnknown(), diags
	}

	return ExternalInformationValue{
		Ips:       ipsVal,
		NetworkId: networkIdVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewExternalInformationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ExternalInformationValue {
	object, diags := NewExternalInformationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewExternalInformationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ExternalInformationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewExternalInformationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewExternalInformationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewExternalInformationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewExternalInformationValueMust(ExternalInformationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ExternalInformationType) ValueType(ctx context.Context) attr.Value {
	return ExternalInformationValue{}
}

var _ basetypes.ObjectValuable = ExternalInformationValue{}

type ExternalInformationValue struct {
	Ips       ovhtypes.TfListNestedValue[ExternalInformationIpsValue] `tfsdk:"ips" json:"ips"`
	NetworkId ovhtypes.TfStringValue                                  `tfsdk:"network_id" json:"networkId"`
	state     attr.ValueState
}

func (v *ExternalInformationValue) UnmarshalJSON(data []byte) error {
	type JsonExternalInformationValue ExternalInformationValue

	var tmp JsonExternalInformationValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Ips = tmp.Ips
	v.NetworkId = tmp.NetworkId

	v.state = attr.ValueStateKnown

	return nil
}

func (v *ExternalInformationValue) MergeWith(other *ExternalInformationValue) {

	if (v.Ips.IsUnknown() || v.Ips.IsNull()) && !other.Ips.IsUnknown() {
		v.Ips = other.Ips
	}

	if (v.NetworkId.IsUnknown() || v.NetworkId.IsNull()) && !other.NetworkId.IsUnknown() {
		v.NetworkId = other.NetworkId
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v ExternalInformationValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"ips":       v.Ips,
		"networkId": v.NetworkId,
	}
}
func (v ExternalInformationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ips"] = basetypes.ListType{
		ElemType: ExternalInformationIpsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Ips.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ips"] = val

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ExternalInformationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ExternalInformationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ExternalInformationValue) String() string {
	return "ExternalInformationValue"
}

func (v ExternalInformationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"ips":        ovhtypes.NewTfListNestedType[ExternalInformationIpsValue](ctx),
			"network_id": ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"ips":        v.Ips,
			"network_id": v.NetworkId,
		})

	return objVal, diags
}

func (v ExternalInformationValue) Equal(o attr.Value) bool {
	other, ok := o.(ExternalInformationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Ips.Equal(other.Ips) {
		return false
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	return true
}

func (v ExternalInformationValue) Type(ctx context.Context) attr.Type {
	return ExternalInformationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ExternalInformationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ips":        ovhtypes.NewTfListNestedType[ExternalInformationIpsValue](ctx),
		"network_id": ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = ExternalInformationIpsType{}

type ExternalInformationIpsType struct {
	basetypes.ObjectType
}

func (t ExternalInformationIpsType) Equal(o attr.Type) bool {
	other, ok := o.(ExternalInformationIpsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ExternalInformationIpsType) String() string {
	return "ExternalInformationIpsType"
}

func (t ExternalInformationIpsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return nil, diags
	}

	subnetIdVal, ok := subnetIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be ovhtypes.TfStringValue, was: %T`, subnetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ExternalInformationIpsValue{
		Ip:       ipVal,
		SubnetId: subnetIdVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewExternalInformationIpsValueNull() ExternalInformationIpsValue {
	return ExternalInformationIpsValue{
		state: attr.ValueStateNull,
	}
}

func NewExternalInformationIpsValueUnknown() ExternalInformationIpsValue {
	return ExternalInformationIpsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewExternalInformationIpsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ExternalInformationIpsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ExternalInformationIpsValue Attribute Value",
				"While creating a ExternalInformationIpsValue value, a missing attribute value was detected. "+
					"A ExternalInformationIpsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExternalInformationIpsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ExternalInformationIpsValue Attribute Type",
				"While creating a ExternalInformationIpsValue value, an invalid attribute value was detected. "+
					"A ExternalInformationIpsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExternalInformationIpsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ExternalInformationIpsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ExternalInformationIpsValue Attribute Value",
				"While creating a ExternalInformationIpsValue value, an extra attribute value was detected. "+
					"A ExternalInformationIpsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ExternalInformationIpsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewExternalInformationIpsValueUnknown(), diags
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewExternalInformationIpsValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return NewExternalInformationIpsValueUnknown(), diags
	}

	subnetIdVal, ok := subnetIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be ovhtypes.TfStringValue, was: %T`, subnetIdAttribute))
	}

	if diags.HasError() {
		return NewExternalInformationIpsValueUnknown(), diags
	}

	return ExternalInformationIpsValue{
		Ip:       ipVal,
		SubnetId: subnetIdVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewExternalInformationIpsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ExternalInformationIpsValue {
	object, diags := NewExternalInformationIpsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewExternalInformationIpsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ExternalInformationIpsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewExternalInformationIpsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewExternalInformationIpsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewExternalInformationIpsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewExternalInformationIpsValueMust(ExternalInformationIpsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ExternalInformationIpsType) ValueType(ctx context.Context) attr.Value {
	return ExternalInformationIpsValue{}
}

var _ basetypes.ObjectValuable = ExternalInformationIpsValue{}

type ExternalInformationIpsValue struct {
	Ip       ovhtypes.TfStringValue `tfsdk:"ip" json:"ip"`
	SubnetId ovhtypes.TfStringValue `tfsdk:"subnet_id" json:"subnetId"`
	state    attr.ValueState
}

func (v *ExternalInformationIpsValue) UnmarshalJSON(data []byte) error {
	type JsonExternalInformationIpsValue ExternalInformationIpsValue

	var tmp JsonExternalInformationIpsValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Ip = tmp.Ip
	v.SubnetId = tmp.SubnetId

	v.state = attr.ValueStateKnown

	return nil
}

func (v *ExternalInformationIpsValue) MergeWith(other *ExternalInformationIpsValue) {

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.SubnetId.IsUnknown() || v.SubnetId.IsNull()) && !other.SubnetId.IsUnknown() {
		v.SubnetId = other.SubnetId
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v ExternalInformationIpsValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"ip":       v.Ip,
		"subnetId": v.SubnetId,
	}
}
func (v ExternalInformationIpsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subnet_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.SubnetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subnet_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ExternalInformationIpsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ExternalInformationIpsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ExternalInformationIpsValue) String() string {
	return "ExternalInformationIpsValue"
}

func (v ExternalInformationIpsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"ip":        ovhtypes.TfStringType{},
			"subnet_id": ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"ip":        v.Ip,
			"subnet_id": v.SubnetId,
		})

	return objVal, diags
}

func (v ExternalInformationIpsValue) Equal(o attr.Value) bool {
	other, ok := o.(ExternalInformationIpsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.SubnetId.Equal(other.SubnetId) {
		return false
	}

	return true
}

func (v ExternalInformationIpsValue) Type(ctx context.Context) attr.Type {
	return ExternalInformationIpsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ExternalInformationIpsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ip":        ovhtypes.TfStringType{},
		"subnet_id": ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = InterfacesType{}

type InterfacesType struct {
	basetypes.ObjectType
}

func (t InterfacesType) Equal(o attr.Type) bool {
	other, ok := o.(InterfacesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InterfacesType) String() string {
	return "InterfacesType"
}

func (t InterfacesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be ovhtypes.TfStringValue, was: %T`, networkIdAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return nil, diags
	}

	subnetIdVal, ok := subnetIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be ovhtypes.TfStringValue, was: %T`, subnetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InterfacesValue{
		Id:        idVal,
		Ip:        ipVal,
		NetworkId: networkIdVal,
		SubnetId:  subnetIdVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueNull() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateNull,
	}
}

func NewInterfacesValueUnknown() InterfacesValue {
	return InterfacesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInterfacesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InterfacesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, a missing attribute value was detected. "+
					"A InterfacesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InterfacesValue Attribute Type",
				"While creating a InterfacesValue value, an invalid attribute value was detected. "+
					"A InterfacesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InterfacesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InterfacesValue Attribute Value",
				"While creating a InterfacesValue value, an extra attribute value was detected. "+
					"A InterfacesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InterfacesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be ovhtypes.TfStringValue, was: %T`, networkIdAttribute))
	}

	subnetIdAttribute, ok := attributes["subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subnet_id is missing from object`)

		return NewInterfacesValueUnknown(), diags
	}

	subnetIdVal, ok := subnetIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subnet_id expected to be ovhtypes.TfStringValue, was: %T`, subnetIdAttribute))
	}

	if diags.HasError() {
		return NewInterfacesValueUnknown(), diags
	}

	return InterfacesValue{
		Id:        idVal,
		Ip:        ipVal,
		NetworkId: networkIdVal,
		SubnetId:  subnetIdVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewInterfacesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InterfacesValue {
	object, diags := NewInterfacesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInterfacesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InterfacesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInterfacesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInterfacesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInterfacesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInterfacesValueMust(InterfacesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InterfacesType) ValueType(ctx context.Context) attr.Value {
	return InterfacesValue{}
}

var _ basetypes.ObjectValuable = InterfacesValue{}

type InterfacesValue struct {
	Id        ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Ip        ovhtypes.TfStringValue `tfsdk:"ip" json:"ip"`
	NetworkId ovhtypes.TfStringValue `tfsdk:"network_id" json:"networkId"`
	SubnetId  ovhtypes.TfStringValue `tfsdk:"subnet_id" json:"subnetId"`
	state     attr.ValueState
}

func (v *InterfacesValue) UnmarshalJSON(data []byte) error {
	type JsonInterfacesValue InterfacesValue

	var tmp JsonInterfacesValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Id = tmp.Id
	v.Ip = tmp.Ip
	v.NetworkId = tmp.NetworkId
	v.SubnetId = tmp.SubnetId

	v.state = attr.ValueStateKnown

	return nil
}

func (v *InterfacesValue) MergeWith(other *InterfacesValue) {

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.NetworkId.IsUnknown() || v.NetworkId.IsNull()) && !other.NetworkId.IsUnknown() {
		v.NetworkId = other.NetworkId
	}

	if (v.SubnetId.IsUnknown() || v.SubnetId.IsNull()) && !other.SubnetId.IsUnknown() {
		v.SubnetId = other.SubnetId
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v InterfacesValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"id":        v.Id,
		"ip":        v.Ip,
		"networkId": v.NetworkId,
		"subnetId":  v.SubnetId,
	}
}
func (v InterfacesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subnet_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		val, err = v.SubnetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subnet_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InterfacesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InterfacesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InterfacesValue) String() string {
	return "InterfacesValue"
}

func (v InterfacesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"id":         ovhtypes.TfStringType{},
			"ip":         ovhtypes.TfStringType{},
			"network_id": ovhtypes.TfStringType{},
			"subnet_id":  ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"id":         v.Id,
			"ip":         v.Ip,
			"network_id": v.NetworkId,
			"subnet_id":  v.SubnetId,
		})

	return objVal, diags
}

func (v InterfacesValue) Equal(o attr.Value) bool {
	other, ok := o.(InterfacesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	if !v.SubnetId.Equal(other.SubnetId) {
		return false
	}

	return true
}

func (v InterfacesValue) Type(ctx context.Context) attr.Type {
	return InterfacesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InterfacesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":         ovhtypes.TfStringType{},
		"ip":         ovhtypes.TfStringType{},
		"network_id": ovhtypes.TfStringType{},
		"subnet_id":  ovhtypes.TfStringType{},
	}
}
